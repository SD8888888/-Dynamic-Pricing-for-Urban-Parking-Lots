# pricing_models.py
import numpy as np

def model1_baseline_price(occupancy, capacity, base_price=10.0, alpha=1.0):
    if capacity == 0:
        return base_price
    return base_price + alpha * (occupancy / capacity)

def model2_demand_price(
    occupancy,
    capacity,
    queue_length,
    traffic_level,
    is_special_day,
    vehicle_type,
    base_price=10.0,
    alpha=0.5,
    beta=0.1,
    gamma=0.2,
    delta=0.3,
    epsilon=0.2,
    vehicle_weight_map=None,
    lambda_=0.5
):
    if vehicle_weight_map is None:
        vehicle_weight_map = {"Car": 1.0, "Bike": 0.5, "Truck": 1.5}

    vt_weight = vehicle_weight_map.get(vehicle_type, 1.0)

    if capacity == 0:
        demand = 0
    else:
        demand = (
            alpha * (occupancy / capacity)
            + beta * queue_length
            - gamma * traffic_level
            + delta * is_special_day
            + epsilon * vt_weight
        )

    normalized_demand = np.tanh(demand)  # keep within [-1, 1]
    price = base_price * (1 + lambda_ * normalized_demand)
    price = min(max(price, base_price * 0.5), base_price * 2)
    return price

def model3_competitive_price(
    current_price,
    is_full,
    nearby_prices,
    base_price=10.0,
    lower_threshold=0.8,
    upper_threshold=1.2
):
    if not nearby_prices:
        return current_price

    avg_nearby_price = np.mean(nearby_prices)

    if is_full and current_price > avg_nearby_price:
        return max(current_price * lower_threshold, base_price * 0.5)
    elif avg_nearby_price > current_price:
        return min(current_price * upper_threshold, base_price * 2)
    else:
        return current_price
